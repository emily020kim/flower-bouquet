/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Heliona (https://sketchfab.com/Heliona)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/rose-6281bf3703584323bb4d8326f1f1b59d
Title: Rose
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import roseScene from "../assets/3d/rose.glb";

const Rose = ({ isRotating, setIsRotating, ...props }) => {
    const roseRef = useRef();
    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(roseScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0.5);
    const dampingFactor = 0.95;

    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        const clientX = e.touches 
            ?  e.touches[0].clientX 
            : e.clientX;

        lastX.current = clientX;
    };

    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    };

    // eslint-disable-next-line react-hooks/exhaustive-deps
    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX = e.touches 
            ?  e.touches[0].clientX 
            : e.clientX;

            const delta = (clientX - lastX.current) / viewport.width;

            roseRef.current.rotation.y += delta * 0.01 * Math.PI;

            lastX.current = clientX;

            rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!isRotating) setIsRotating(true);
            roseRef.current.rotation.y += 0.01 * Math.PI;
            rotationSpeed.current = 0.0125;
        } else if (e.key === 'ArrowRight') {
            if (!isRotating) setIsRotating(true);
            roseRef.current.rotation.y -= 0.01 * Math.PI;
            rotationSpeed.current = -0.0125;
        }
    };

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
            setIsRotating(false);
        }
    };

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            roseRef.current.rotation.y += rotationSpeed.current;
        } else {
            const rotation = roseRef.current.rotation.y;
        }
    });

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

    return (
        <a.group {...props} ref={roseRef}>
            <group {...props} dispose={null}>
                <group scale={0.01}>
                    <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes['ru��a_m_petal_0'].geometry}
                        material={materials.m_petal}
                    />
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes['ru��a_m_stem_0'].geometry}
                        material={materials.m_stem}
                    />
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes['ru��a_m_leafs_0'].geometry}
                        material={materials.m_leafs}
                    />
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes['ru��a_m_thorns_0'].geometry}
                        material={materials.m_thorns}
                    />
                    </group>
                </group>
            </group>
        </a.group>
    )
}

export default Rose